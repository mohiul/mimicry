/**
 * \file CAPattern.h
 */

#ifndef CA_PATTERN_H
#define CA_PATTERN_H

#include <boost/numeric/ublas/vector.hpp>
#include <boost/numeric/ublas/io.hpp>

#include "System.h"
#include "Genome.h"

using namespace boost::numeric::ublas;

/**
 * An instance of pattern generated by cellular automata, \a CAPattern.
 * This class contains a 2D binary pattern.
 * Also contains function to generated the pattern from its 8 bit 
 * genomic representation. One instance contained by each \a Prey.
 */
class CAPattern
{
private:
	/**
	 * Integer array containg 2D binary pattern. Generated from Cellular Automata.
	 */
	int pattern[PATTERN_SIZE][PATTERN_SIZE];

	/**
	 * 2D binary pattern in a serialized vector form. 
	 * Also binary information has been bipolarized for convinience to use in Hopfield Network
	 */
	vector<int>* serializedPattern;
public:
	CAPattern();
	void set(int i, int j, int value);
	int get(int i, int j);
	void generatePattern(Genome<PREY_GENE_SIZE>* genome);
	vector<int>* serialize();
	bool operator==(CAPattern &_pattern);
};

/**
 * Inline function used to find bitwise equality of two \a CAPattern object.
 * \return boolean equality of 2D binary patterns. 
 * \param _pattern same object to compare equality with the current one.
 */
inline bool CAPattern::operator==(CAPattern &_pattern)
{
	bool equal = true;
	for (int i = 0; i < PATTERN_SIZE; i++)
		for (int j = 0; j < PATTERN_SIZE; j++)
			if(pattern[i][j] != _pattern.get(i, j))
			{
				equal = false;
				break;
			}
   return equal;
}

#endif CA_PATTERN_H