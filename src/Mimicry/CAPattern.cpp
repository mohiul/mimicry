/**
 * \file CAPattern.cpp
 */

#include "CAPattern.h"
#include <iostream>

/**
 * Construct a \a CAPattern, and initialize the 2D binary pattern with zeros.
 */
CAPattern::CAPattern()
{
	for (int w = 0; w < PATTERN_SIZE; w++)
		for (int l = 0; l < PATTERN_SIZE; l++)
			pattern[w][l] = 0;
}

/**
 * Set binary value of the 2D pattern at (i, j) coordinate.
 * \param i coordinate of the 2D pattern.
 * \param j coordinate of the 2D pattern.
 * \param binary value of the (i, j) coordinate.
 */
void CAPattern::set(int i, int j, int value)
{
	assert(i < PATTERN_SIZE && j < PATTERN_SIZE);
	pattern[i][j] = value;
}

/**
 * \return binary value of the 2D pattern at (i, j) coordinate.
 * \param i coordinate of the 2D pattern.
 * \param j coordinate of the 2D pattern.
 */
int CAPattern::get(int i, int j)
{
	assert(i < PATTERN_SIZE && j < PATTERN_SIZE);
	return pattern[i][j];
}

/**
 * Generate a Cellular Automata pattern with first 8 bit of the prey genome.
 * \param genome of the \a Prey species. 
 */
void CAPattern::generatePattern(Genome<PREY_GENE_SIZE>* genome)
{
	for(int i = 0; i < PATTERN_SIZE; i++)
	{
		if (i == floor((double)(PATTERN_SIZE / 2)))
		{
			pattern[0][i] = 1;
		} else {
			pattern[0][i] = 0;
		}
	}
	for(int i = 1; i < PATTERN_SIZE - 1 ; i++)
		for(int j = 1; j < PATTERN_SIZE - 1; j++)
		{
			if (pattern[i-1][j-1] == 1 
				&& pattern[i-1][j] == 1
				&& pattern[i-1][j+1] == 1)
			{
				pattern[i][j] = genome->get(0);
			} else if (pattern[i-1][j-1] == 1
				&& pattern[i-1][j] == 1
				&& pattern[i-1][j+1] == 0)
			{
				pattern[i][j] = genome->get(1);
			} else if (pattern[i-1][j-1] == 1
				&& pattern[i-1][j] == 0
				&& pattern[i-1][j+1] == 1)
			{
				pattern[i][j] = genome->get(2);
			} else if (pattern[i-1][j-1] == 1
				&& pattern[i-1][j] == 0
				&& pattern[i-1][j+1] == 0)
			{
				pattern[i][j] = genome->get(3);
			} else if (pattern[i-1][j-1] == 0
				&& pattern[i-1][j] == 1
				&& pattern[i-1][j+1] == 1)
			{
				pattern[i][j] = genome->get(4);
			} else if (pattern[i-1][j-1] == 0 
				&& pattern[i-1][j] == 1
				&& pattern[i-1][j+1] == 0)
			{
				pattern[i][j] = genome->get(5);
			} else if (pattern[i-1][j-1] == 0
				&& pattern[i-1][j] == 0
				&& pattern[i-1][j+1] == 1)
			{
				pattern[i][j] = genome->get(6);
			} else if (pattern[i-1][j-1] == 0
				&& pattern[i-1][j] == 0
				&& pattern[i-1][j+1] == 0)
			{
				pattern[i][j] = genome->get(7);
			}
		}
}

/**
 * Serialize the 2D pattern generated by Cellular Automata into 1D vector 
 * with bipolar values. Required for Hopfield Network recognition.
 * \return serialized bipolar vector.
 */
vector<int>* CAPattern::serialize()
{
	serializedPattern = new vector<int>(PATTERN_SIZE*PATTERN_SIZE);
	for (int w = 0; w < PATTERN_SIZE; w++)
		for (int l = 0; l < PATTERN_SIZE; l++)
			(*serializedPattern)(w * PATTERN_SIZE + l) = 2*pattern[w][l] - 1;
	return serializedPattern;
}